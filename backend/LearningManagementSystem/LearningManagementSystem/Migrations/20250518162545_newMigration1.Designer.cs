// <auto-generated />
using LearningManagementSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningManagementSystem.Migrations
{
    [DbContext(typeof(LearningManagementContext))]
    [Migration("20250518162545_newMigration1")]
    partial class newMigration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.Property<string>("ModuleTitle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDetailsTitle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ModuleTitle");

                    b.HasIndex("CourseDetailsTitle");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestion", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<string>("AssignmentModuleTitle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignmentModuleTitle");

                    b.ToTable("AssignmentQuestions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Course", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Title");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Title = "HTML & CSS Basics",
                            CourseCategory = "web-development",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "web-development/1681327776406.png",
                            Level = "Beginner",
                            Rating = 4.0
                        },
                        new
                        {
                            Title = "JavaScript Mastery",
                            CourseCategory = "web-development",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "web-development/cover.jpg",
                            Level = "Intermediate",
                            Rating = 4.5
                        },
                        new
                        {
                            Title = "Advanced React",
                            CourseCategory = "web-development",
                            Duration = "10 Weeks",
                            Id = 3,
                            Image = "web-development/eba1c4863eb1a6576514ccf2b138f6f5b53871e9.png",
                            Level = "Advanced",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Title = "React Native for Beginners",
                            CourseCategory = "mobile-development",
                            Duration = "6 Weeks",
                            Id = 1,
                            Image = "mobile-development/cover-cold-dive-into-react-native-a-beginners-tutorial.png",
                            Level = "Beginner",
                            Rating = 4.0
                        },
                        new
                        {
                            Title = "Advanced Android Development",
                            CourseCategory = "mobile-development",
                            Duration = "12 Weeks",
                            Id = 2,
                            Image = "mobile-development/717429608c93_.png",
                            Level = "Advanced",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Title = "iOS App Development",
                            CourseCategory = "mobile-development",
                            Duration = "8 Weeks",
                            Id = 3,
                            Image = "mobile-development/65f85396b33db_ios.app.development.1920.1080.png",
                            Level = "Intermediate",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Title = "Intro to Machine Learning",
                            CourseCategory = "ai-ml",
                            Duration = "5 Weeks",
                            Id = 1,
                            Image = "ai-ml/Blog-What-is-NLP.jpg",
                            Level = "Beginner",
                            Rating = 4.2000000000000002
                        },
                        new
                        {
                            Title = "Deep Learning with TensorFlow",
                            CourseCategory = "ai-ml",
                            Duration = "10 Weeks",
                            Id = 2,
                            Image = "ai-ml/maxresdefault.jpg",
                            Level = "Advanced",
                            Rating = 4.7999999999999998
                        },
                        new
                        {
                            Title = "Natural Language Processing",
                            CourseCategory = "ai-ml",
                            Duration = "7 Weeks",
                            Id = 3,
                            Image = "ai-ml/Blog-What-is-NLP.jpg",
                            Level = "Intermediate",
                            Rating = 4.5
                        },
                        new
                        {
                            Title = "Digital Marketing Fundamentals",
                            CourseCategory = "marketing",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "marketing/54-1.png",
                            Level = "Beginner",
                            Rating = 4.2000000000000002
                        },
                        new
                        {
                            Title = "SEO Mastery",
                            CourseCategory = "marketing",
                            Duration = "6 Weeks",
                            Id = 2,
                            Image = "marketing/SEO-Career-in-Chandigarh.webp",
                            Level = "Intermediate",
                            Rating = 4.5999999999999996
                        },
                        new
                        {
                            Title = "Advanced Content Marketing",
                            CourseCategory = "marketing",
                            Duration = "8 Weeks",
                            Id = 3,
                            Image = "marketing/advanced-content-marketing.jpg",
                            Level = "Advanced",
                            Rating = 4.7999999999999998
                        },
                        new
                        {
                            Title = "Photoshop Essentials",
                            CourseCategory = "graphic-design",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "graphic-design/22qHomepageFeatureBox-PS-ES-ARP18.jpg",
                            Level = "Beginner",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Title = "Advanced Illustrator",
                            CourseCategory = "graphic-design",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "graphic-design/maxresdefault.jpg",
                            Level = "Advanced",
                            Rating = 4.5999999999999996
                        },
                        new
                        {
                            Title = "UI/UX Design Basics",
                            CourseCategory = "graphic-design",
                            Duration = "6 Weeks",
                            Id = 3,
                            Image = "graphic-design/effective_ways_to_learn_ui_ux_design.webp",
                            Level = "Intermediate",
                            Rating = 4.5
                        },
                        new
                        {
                            Title = "Basic Photography Techniques",
                            CourseCategory = "photography",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "photography/basic.png",
                            Level = "Beginner",
                            Rating = 4.2000000000000002
                        },
                        new
                        {
                            Title = "Advanced Portrait Photography",
                            CourseCategory = "photography",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "photography/portrait.png",
                            Level = "Advanced",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Title = "Photo Editing Mastery",
                            CourseCategory = "photography",
                            Duration = "6 Weeks",
                            Id = 3,
                            Image = "photography/editing.png",
                            Level = "Intermediate",
                            Rating = 4.4000000000000004
                        },
                        new
                        {
                            Title = "Creative Writing Basics",
                            CourseCategory = "creative-writing",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "creative-writing/basics.png",
                            Level = "Beginner",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Title = "Advanced Storytelling",
                            CourseCategory = "creative-writing",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "creative-writing/storytelling.png",
                            Level = "Advanced",
                            Rating = 4.7999999999999998
                        },
                        new
                        {
                            Title = "Poetry Writing Mastery",
                            CourseCategory = "creative-writing",
                            Duration = "6 Weeks",
                            Id = 3,
                            Image = "creative-writing/poetry.png",
                            Level = "Intermediate",
                            Rating = 4.5
                        },
                        new
                        {
                            Title = "Basic Nutrition Guide",
                            CourseCategory = "nutrition",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "nutrition/guide.png",
                            Level = "Beginner",
                            Rating = 4.2000000000000002
                        },
                        new
                        {
                            Title = "Advanced Diet Planning",
                            CourseCategory = "nutrition",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "nutrition/diet.png",
                            Level = "Advanced",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Title = "Healthy Cooking",
                            CourseCategory = "nutrition",
                            Duration = "6 Weeks",
                            Id = 3,
                            Image = "nutrition/cooking.png",
                            Level = "Intermediate",
                            Rating = 4.4000000000000004
                        },
                        new
                        {
                            Title = "Fitness Fundamentals",
                            CourseCategory = "fitness",
                            Duration = "4 Weeks",
                            Id = 1,
                            Image = "fitness/fundamentals.png",
                            Level = "Beginner",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Title = "Strength Training",
                            CourseCategory = "fitness",
                            Duration = "8 Weeks",
                            Id = 2,
                            Image = "fitness/strength.png",
                            Level = "Advanced",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Title = "Cardio Workouts",
                            CourseCategory = "fitness",
                            Duration = "6 Weeks",
                            Id = 3,
                            Image = "fitness/cardio.png",
                            Level = "Intermediate",
                            Rating = 4.4000000000000004
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CourseDetails", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ModulesTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfModules")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("VideoTutorials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("CourseDetails");

                    b.HasData(
                        new
                        {
                            Title = "HTML & CSS Basics",
                            CourseCategory = "web-development",
                            CourseId = 1,
                            ModulesTitle = "[\"HTML Tags\",\"CSS Selectors\",\"CSS Media Queries\"]",
                            NumOfModules = 3,
                            VideoTutorials = "[\"https://youtu.be/K_EVuLegRZ0?si=FcUzrP3WTwv4BhZV\",\"https://youtu.be/l1mER1bV0N0?si=VaFAy7EqdX0B5lXv\",\"https://youtu.be/n9yI6fjkrfE?si=eLHobSG25-N-i3rD\"]"
                        },
                        new
                        {
                            Title = "JavaScript Mastery",
                            CourseCategory = "web-development",
                            CourseId = 2,
                            ModulesTitle = "[\"JavaScript Fundamentals\",\"DOM Manipulation\",\"Asynchronous JavaScript\",\"Modern JS Features\"]",
                            NumOfModules = 4,
                            VideoTutorials = "[\"https://youtu.be/hdI2bqOjy3c?si=QdN82-7HZIXu9ILP\",\"https://youtu.be/W6NZfCO5SIk?si=_qH7BHQrTwCjSbKA\",\"https://youtu.be/PkZNo7MFNFg?si=UeOQkG3MqnUAFxfJ\",\"https://youtu.be/Qqx_wzMmFeA?si=sDKWM-MmjS8MHpBp\"]"
                        },
                        new
                        {
                            Title = "Advanced React",
                            CourseCategory = "web-development",
                            CourseId = 3,
                            ModulesTitle = "[\"React Hooks\",\"State Management\",\"Performance Optimization\",\"Testing React Apps\",\"Advanced Patterns\"]",
                            NumOfModules = 5,
                            VideoTutorials = "[\"https://youtu.be/w7ejDZ8SWv8?si=LVGzFoA-IITk0gBP\",\"https://youtu.be/4UZrsTqkcW4?si=Vp5lYUCjPGBPQF34\",\"https://youtu.be/bMknfKXIFA8?si=2Y9ZnQQkLQ1wT8Gj\",\"https://youtu.be/a_7Z7C_JCyo?si=vGOdFF-aEpCl-G9X\",\"https://youtu.be/Ke90Tje7VS0?si=ZAiLKmPaXQx2_e7n\"]"
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<string>("CourseDetailsTitle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseDetailsTitle");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = 1,
                            CourseTitle = "HTML & CSS Basics",
                            Explanation = "HTML stands for Hyper Text Markup Language.",
                            Level = 1,
                            Option1 = "Hyper Text Markup Language",
                            Option2 = "High Text Markup Language",
                            Option3 = "Hyper Tabular Markup Language",
                            Option4 = "None of the above",
                            Question = "What does HTML stand for?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = 2,
                            CourseTitle = "HTML & CSS Basics",
                            Explanation = "The 'color' property in CSS is used to change the text color.",
                            Level = 1,
                            Option1 = "font-style",
                            Option2 = "color",
                            Option3 = "text-color",
                            Option4 = "background-color",
                            Question = "Which CSS property is used to change the text color?"
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = 4,
                            CourseTitle = "JavaScript Mastery",
                            Explanation = "JavaScript does not have a 'Character' data type.",
                            Level = 1,
                            Option1 = "Undefined",
                            Option2 = "Number",
                            Option3 = "Boolean",
                            Option4 = "Character",
                            Question = "Which of the following is NOT a JavaScript data type?"
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = 2,
                            CourseTitle = "JavaScript Mastery",
                            Explanation = "The correct way to define a function is: function myFunction()",
                            Level = 1,
                            Option1 = "function = myFunction()",
                            Option2 = "function myFunction()",
                            Option3 = "function:myFunction()",
                            Option4 = "create function myFunction()",
                            Question = "How do you create a function in JavaScript?"
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = 2,
                            CourseTitle = "Advanced React",
                            Explanation = "useState is the hook used to manage state.",
                            Level = 1,
                            Option1 = "useEffect",
                            Option2 = "useState",
                            Option3 = "useContext",
                            Option4 = "useReducer",
                            Question = "What hook is used to manage state in a functional component?"
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = 1,
                            CourseTitle = "Advanced React",
                            Explanation = "useEffect is used to perform side effects such as data fetching or subscriptions.",
                            Level = 2,
                            Option1 = "To perform side effects in components",
                            Option2 = "To create components",
                            Option3 = "To update state",
                            Option4 = "To handle events",
                            Question = "What is the purpose of React's useEffect hook?"
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoursesCount")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcategoryId");

                    b.HasIndex("CategoryName");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AgreeTerms")
                        .HasColumnType("bit");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreeTerms = true,
                            ConfirmPassword = "password123",
                            Email = "alice@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "password123",
                            Role = "student"
                        },
                        new
                        {
                            Id = 2,
                            AgreeTerms = true,
                            ConfirmPassword = "password456",
                            Email = "bob@example.com",
                            FirstName = "Bob",
                            LastName = "Smith",
                            Password = "password456",
                            Role = "student"
                        },
                        new
                        {
                            Id = 3,
                            AgreeTerms = true,
                            ConfirmPassword = "johnDoe12",
                            Email = "jd@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "johnDoe12",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserAssignmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAssignmentSubmissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = "A1",
                            CourseTitle = "HTML & CSS Basics",
                            ModuleTitle = "HTML Tags",
                            SubmissionDate = "2025-05-18",
                            SubmittedFilePath = "/uploads/alice_assignment1.html",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = "A2",
                            CourseTitle = "Advanced React",
                            ModuleTitle = "React Hooks",
                            SubmissionDate = "2025-05-17",
                            SubmittedFilePath = "/uploads/bob_assignment2.js",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseTitle = "HTML & CSS Basics",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseTitle = "JavaScript Mastery",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserQuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizAttempts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuizId = 1,
                            Score = 1,
                            SelectedOption = "2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = true,
                            QuizId = 2,
                            Score = 1,
                            SelectedOption = "3",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            QuizId = 1,
                            Score = 0,
                            SelectedOption = "1",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.CourseDetails", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseDetailsTitle");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestion", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Assignment", null)
                        .WithMany("Assignments")
                        .HasForeignKey("AssignmentModuleTitle");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.QuizQuestion", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.CourseDetails", null)
                        .WithMany("Quiz")
                        .HasForeignKey("CourseDetailsTitle");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Subcategory", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Category", null)
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryName");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserAssignmentSubmission", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("UploadedAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserCourse", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.UserQuizAttempt", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.QuizQuestion", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CourseDetails", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.User", b =>
                {
                    b.Navigation("EnrolledCourses");

                    b.Navigation("QuizAttempts");

                    b.Navigation("UploadedAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
